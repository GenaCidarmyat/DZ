Лаба1

import math
a=1
b=1
c=2
x=1
r=2
q=1
vin=(ab)*crq-math.e(3*math.log(x**math.e)**2)
print(vin)

import math
x=1
vin=4*((math.cos(x**2)**3)-1)**2-3.2*abs(x)
print(vin)

import math
x=2
y=2
print((1+math.atan(x)/(236)-7.2/(x+y)))

import math
x=2
a=1
print(((x+math.cos(x)2)(1/3)-7a**(x+4))/(3x**2)+x-1*(1/2))

import math
s=1
t=0
b=6t+s
a=math.cos(t)**(2)+s
print(((3a2*+4*b)(1/2)-1)/(1+math.log(abs(a-2*b+1))))


Лаба 2

x=int(input()) if(x>=4 and x<10): print('true') else: print('False')

x=int(input())
if(x>-12 and x<3) or (x>=5 and x<13):
print('true')
else:
print('False')


Лаба 3

import math x=float(input("Enter a number: ")) y=float(input("Enter a number: ")) z=float(input("Enter a number: ")) c=0 if x<0: print(x) c+=1 else: print('x>0') if y<0: print(x) c+=1 else: print('y>0') if z<0: print(x) c+=1 else: print('z>0') print(c)


Лаба 4 

import numpy as np
import matplotlib.pyplot as plt
a0 = 2
a1 = -35
a2 = -33
a3 = 4
a4 = 2
y = lambda x: a0+a1x+a2x2+a3*x3+a4*x**4
print("y:", y)
x = np.linspace(-5, 5, 42)
print(' x y(x)')
for temp in x :
print ( temp, y(temp))
xmax = max(x,key=y)
print('Xmax = ',xmax,end=' ')
fmax = max(y(x))
print('Ymax = ',fmax)
xmin = min(x,key=y)
print('Xmin = ',xmin,end=' ')
fmin = min(y(x))
print('Ymin = ',fmin)
fig = plt.subplots()
plt.plot(x, y(x))
plt.show()


Лаба 5

def uk(x, k): return (-1)(k) * (x(2k+1) / ((2k-1)**2))
def calculate_sum(x, n): total_sum = 0 for k in range(1, n+1): total_sum += uk(x, k) return total_sum
x_values = [0.1, 0.3, 0.4, 0.7, 1.0] n = 10
print("| x | S |") print("-------------------") for x in x_values: result = calculate_sum(x, n) print(f"| {x} | {result:.6f} |") print("-------------------")


Лаба 6

A=[5, 10, 15, 20]
B=[2, -3, 0, 5]
T=[]
for i in range(len(A)):
if B[i]>0:
T.append(A[i]/ B[i])
else:
T.append(A[i]* B[i])
print('Массив A', A)
print('Массив B', B)
print('Массив T', T)


Лаба 7

A = np.array([[1,2,3], [1,2,1], [3,2,0]]) B = np.array([[4,1,2], [0,4,3], [1,1,1]]) q = np.array([[-1.6, 0.8, 1.1]]) r = np.array([[-0.7, 1.3, 0.2]])
s = np.dot(np.dot(B, (r - q)), np.dot(B, r))
print("Результат уравнения s = ", s)


Лаба 8

import numpy as np
S = 29 G = 6 K = 1
A = np.array([[1, 5, 1], [4, -1, 1], [S, G, 2*(S+G+K)]])
B = np.array([S-G+K+10, S-G+4K-2, 2((S-G)(S+G+K)+G)+KS])
X = np.linalg.solve(A, B)
print("Решение системы уравнений:") print("x1 =", X[0]) print("x2 =", X[1]) print("x3 =", X[2])


Лаба 9

import numpy as np
S = 29
G = 6
K = 80301
A = np.array([[1, 5, 1],
[4, -1, 1],
[S, G, 2*(S+G+K)]])
B = np.array([S-G+K+10, S-G+4K-2, 2((S-G)(S+G+K)+G)+KS])
X0 = np.array([0, 0, 0])
def simple_iteration_method(A, B, X0, max_iter=100, tol=1e-6):
n = len(B)
X = X0.copy()
for _ in range(max_iter):
X_new = np.zeros(n)
for i in range(n):
X_new[i] = (B[i] - A[i, :].dot(X_new) + A[i, i]*X_new[i]) / A[i, i]
if np.linalg.norm(X_new - X) < tol:
return X_new
X = X_new
return X
result_simple_iteration = simple_iteration_method(A, B, X0)
print("Решение методом простой итерации:", result_simple_iteration)
def gauss_seidel_method(A, B, X0, max_iter=100, tol=1e-6):
n = len(B)
X = X0.copy()
for _ in range(max_iter):
for i in range(n):
X[i] = (B[i] - A[i, :i].dot(X[:i]) - A[i, i+1:].dot(X[i+1:])) / A[i, i]
if np.linalg.norm(A.dot(X) - B) < tol:
return X
return X
result_gauss_seidel = gauss_seidel_method(A, B, X0)
print("Решение методом Зейделя:", result_gauss_seidel)


Лаба 10

import numpy as np
G = 6
S = 29
p = 2*(G + S)
m = -p + S
A = np.array([[p, m, 2S],[m, 2p + S, m],[2*S, m, p]]) / 6
eigenvalues, eigenvectors = np.linalg.eig(A)
max_eigenvalue_index = np.argmax(np.abs(eigenvalues))
max_eigenvalue = eigenvalues[max_eigenvalue_index]
max_eigenvector = eigenvectors[:, max_eigenvalue_index]
print("Собственные значения матрицы A:")
print(eigenvalues)
print("\nСобственные векторы матрицы A:")
print(eigenvectors)
print("\nМаксимальное по модулю собственное значение:")
print(max_eigenvalue)
print("\nСоответствующий ему собственный вектор:")
print(max_eigenvector)


Лаба 11

def f(x): return ax**3 + bx**2 + c*x + d
a = 1 b = 2 c = 3 d = 4 h = 1 x0 = 0 x1 = h x2 = 2h x3 = 3h x4 = 4h s_rectangle = h * (f(x0) + f(x1) + f(x2) + f(x3)) s_trapezoid = h/2 * (f(x0) + 2f(x1) + 2*f(x2) + f(x3))
s_simpson = h/3 * (f(x0) + 4f(x1) + 2f(x2) + 4*f(x3) + f(x4)) print("Метод прямоугольников:", s_rectangle) print("Метод трапеций:", s_trapezoid) print("Метод Симпсона:", s_simpson)


Лаба 12

def f(x, a0, a1, a2, a3): return a0 + a1x + a2x2 + a3*x3
def bisection_method(f, a0, a1, a2, a3, a, b, epsilon): if f(a, a0, a1, a2, a3) * f(b, a0, a1, a2, a3) > 0: print("Корень не найден в данном отрезке.") return None
while (b - a) / 2.0 > epsilon:
    c = (a + b) / 2.0
    if f(c, a0, a1, a2, a3) == 0:
        return c
    elif f(c, a0, a1, a2, a3) * f(a, a0, a1, a2, a3) < 0:
        b = c
    else:
        a = c
return (a + b) / 2.0
a0, a1, a2, a3 = 29, 6, 10, -1 a, b = 0, 3 epsilon = 1e-5 root = bisection_method(f, a0, a1, a2, a3, a, b, epsilon) print("Корень полинома на отрезке x ∈ [0;3] методом половинного деления: ", root)

Лаба 13


x = [7, 12, 2, 1, 8, 15, 12, 12, 7, 5, 9, 6] y = [7, 11, 1, 1, 7, 15, 13, 12, 6.5, 5, 8, 6] avg_x = sum(x) / len(x) avg_y = sum(y) / len(y) numerator = sum([(xi - avg_x) * (yi - avg_y) for xi, yi in zip(x, y)]) denominator = sum([(xi - avg_x) ** 2 for xi in x])
a = numerator / denominator b = avg_y - a * avg_x print(f"Коэффициент a: {a}") print(f"Коэффициент b: {b}")









